{"version":3,"sources":["Files/Header.js","Files/Statewise.js","Files/India.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","Component","Statewise","state","statedata","Axios","get","then","response","setState","data","keys","Object","this","Accordion","map","itm","k","districts","districtData","total_active","total_confirmed","total_deaths","total_recovered","district_list","i","active","confirmed","deceased","recovered","x","push","Card","as","Button","eventKey","Body","district_nam","India","countrydata","src","style","width","Title","cases","Text","deaths","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5770da72.chunk.js","sourcesContent":["import React,{ Component } from 'react';\r\nimport { Navbar,Nav } from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            \r\n<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n  <Navbar.Brand href=\"#home\">Covid19</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"mr-auto\">\r\n      <Link className=\"nav-link\" to=\"#\">India</Link>\r\n      \r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React,{ Component } from 'react';\r\nimport Axios from 'axios';\r\nimport {Accordion,Button,Card} from 'react-bootstrap'\r\nclass Statewise extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            statedata : {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        Axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(response=>{\r\n            \r\n            this.setState({statedata:response.data });\r\n        });\r\n         \r\n    }\r\n\r\n    render(){\r\n\r\n        let keys=Object.keys(this.state.statedata)\r\n        return(\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n\r\n                <Accordion>\r\n                    {\r\n                        keys.map((itm,k)=>{\r\n                            if(itm==\"Kerala\")\r\n                        {\r\n                                    let districts=this.state.statedata[itm].districtData;\r\n                                    let dist_keys=Object.keys(districts)\r\n                                    \r\n                                    let total_active=0;\r\n                                    let total_confirmed=0;\r\n                                    let total_deaths=0;\r\n                                    let total_recovered=0;\r\n\r\n                                    let district_list=[];\r\n\r\n                                    for(let i in districts){\r\n                                        total_active += districts[i].active;\r\n                                        total_confirmed += districts[i].confirmed;\r\n                                        total_deaths += districts[i].deceased;\r\n                                        total_recovered += districts[i].recovered;\r\n                                        let x=districts[i];\r\n                                        x[\"district_nam\"]= i;\r\n\r\n                                        district_list.push(x);\r\n                                    }\r\n                                    //console.log(district_list);\r\n\r\n                                return(\r\n                                    <Card>\r\n        <Card.Header>\r\n        <Accordion.Toggle as={Button} variant=\"primary\" eventKey={k}>\r\n                                {itm} - <span className=\"btn-light p-1 mr-2\">Total Cases-{total_confirmed}</span> <span className=\"btn-light p-1 mr-2\">Active-{total_active}</span> <span className=\"btn-light p-1 mr-2\">Recovered-{total_recovered}</span> <span className=\"btn-light p-1 mr-2\">Deaths-{total_deaths}</span>\r\n        </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey={k}>\r\n        <Card.Body>\r\n            <table className=\"table table-bordered table\">\r\n                <thead>\r\n                    <tr>\r\n                        <td>District</td>\r\n                        <td>Confirmed</td>\r\n                        <td>Active</td>\r\n                        <td>Recovered</td>\r\n                        <td>Deaths</td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        \r\n                        district_list.map((itm,k)=>{\r\n                            return(\r\n\r\n                                    <tr>\r\n                                        <td>{itm.district_nam}</td>\r\n                                        <td>{itm.confirmed}</td>\r\n                                        <td>{itm.active}</td>\r\n                                        <td>{itm.recovered}</td>\r\n                                        <td>{itm.deceased}</td>\r\n                                    </tr>\r\n\r\n                            )\r\n                            \r\n                        })\r\n                            \r\n                    }\r\n                </tbody>\r\n                \r\n            </table>\r\n        </Card.Body>\r\n        </Accordion.Collapse>\r\n    </Card>\r\n                                )\r\n                }\r\n                \r\n                            })\r\n                    }\r\n  \r\n  \r\n</Accordion>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Statewise","import React ,{Component} from 'react';\r\nimport{Card} from 'react-bootstrap';\r\nimport Statewise from './Statewise';\r\n\r\nimport Axios from 'axios';\r\n\r\n\r\nclass India extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            countrydata : {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        Axios.get(\"https://corona.lmao.ninja/v2/countries/india\").then(response=>{\r\n            \r\n            this.setState({countrydata:response.data });\r\n        });\r\n         \r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <img src=\"https://www.countryflags.io/IN/shiny/64.png\"/>\r\n                    <h3>India</h3>\r\n\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-primary\" style={{ width: '18rem' }}>\r\n                                <Card.Body className=\"text-center\">\r\n                                    <Card.Title>Total Cases </Card.Title>\r\n                                    <h3>{this.state.countrydata.cases} </h3>\r\n                                    <Card.Text>\r\n                                        \r\n                                    </Card.Text>\r\n                                    \r\n                                </Card.Body>\r\n                        </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-warning\" style={{ width: '18rem' }}>\r\n                            <Card.Body className=\"text-center\">\r\n                                    <Card.Title>Active Cases </Card.Title>\r\n                                    <h3>{this.state.countrydata.active}</h3>\r\n                                    <Card.Text>\r\n                                        \r\n                                    </Card.Text>\r\n                                    \r\n                            </Card.Body>\r\n                        </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-success\" style={{ width: '18rem' }}>\r\n                            <Card.Body className=\"text-center\">\r\n                                    <Card.Title>Recovered </Card.Title>\r\n                                    <h3>{this.state.countrydata.recovered}</h3>\r\n                                    <Card.Text>\r\n                                        \r\n                                    </Card.Text>\r\n                                    \r\n                            </Card.Body>\r\n                        </Card>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                        <Card className=\"badge badge-danger\" style={{ width: '18rem' }}>\r\n                            <Card.Body className=\"text-center\">\r\n                                    <Card.Title>Total Deaths </Card.Title>\r\n                                    <h3>{this.state.countrydata.deaths}</h3>\r\n                                    <Card.Text>\r\n                                        \r\n                                    </Card.Text>\r\n                                    \r\n                            </Card.Body>\r\n                        </Card>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <Statewise/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default India","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Header from './Files/Header';\nimport India from './Files/India';\n\nimport { Button } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Link,\n  Switch,\n  Route\n  \n}from 'react-router-dom';\n\nclass App extends Component{\n    constructor(){\n      super();\n    }\n\n\n  render(){\n      return(\n        <div className=\"container-fluid\">\n            <Router>\n                <Header/>\n                <Switch>\n                    <Route exact path=\"/\">\n                      <India/>\n                    </Route>\n                    <Route exact path=\"/India\">\n                      <India/>\n                    </Route>\n                </Switch>\n            </Router>\n          \n        </div>\n      )\n\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}